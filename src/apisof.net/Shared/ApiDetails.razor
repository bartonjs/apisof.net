@using NuGet.Frameworks
<div class="container-fluid px-0">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            @if (BrowsingContext is FrameworkDiffBrowsingContext diffContext)
            {
                var left = diffContext.Left.GetShortFolderName();
                var right = diffContext.Right.GetShortFolderName();
                <li class="breadcrumb-item">
                    <a href="@Link.ForDiff()" class="text-underline">@left vs @right</a>
                </li>
            }
            <li class="breadcrumb-item"><Glyph Kind="GlyphKind.Database" /> <a href="@Link.ForCatalog()" class="text-underline">Catalog</a></li>
            @foreach (var api in Breadcrumbs)
            {
                if (api == Api)
                {
                    <li class="breadcrumb-item flex-inline-breakable active" aria-current="page"><Glyph Kind="@api.Kind.GetGlyph()" /> @api.Name</li>
                }
                else
                {
                    <li class="breadcrumb-item flex-inline-breakable"><Glyph Kind="@api.Kind.GetGlyph()" /> <a href="@Link.For(api)" class="text-underline">@api.Name</a></li>
                }
            }
        </ol>
    </nav>
</div>

<div class="container-fluid overflow-hidden">
    <div class="row">
        <ul class="col-md-3 list-unstyled overflow-hidden text-nowrap border-right d-none d-md-block">
            <li>
                @{
                    var parentBrowsingData = BrowsingContext.GetData(Parent);
                    var parentCssClasses = parentBrowsingData?.CssClasses;
                    var parentMarkup = parentBrowsingData?.AdditionalMarkup;
                }

                @if (Parent == Api)
                {
                    <Glyph Kind="@Parent.Kind.GetGlyph()" /> <span class="font-weight-bold text-breakable @parentCssClasses">@Parent.Name</span> @parentMarkup
                }
                else
                {
                    <span class="flex-inline-breakable">
                        <Glyph Kind="@Parent.Kind.GetGlyph()" /> <a class="@parentCssClasses" href="@Link.For(Parent)">@Parent.Name<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a> @parentMarkup
                    </span>
                }

                <ul class="list-unstyled pl-4">
                    @foreach (var child in Parent.Children.OrderBy(x => x))
                    {
                        var childBrowsingData = BrowsingContext.GetData(child);
                        var childExcluded = childBrowsingData?.Excluded ?? false;
                        var childCssClasses = childBrowsingData?.CssClasses;
                        var childMarkup = childBrowsingData?.AdditionalMarkup;

                        if (childExcluded)
                            continue;

                        <li class="flex-inline-breakable">
                            @if (child == Api)
                            {
                                <Glyph Kind="@child.Kind.GetGlyph()" /> <span class="font-weight-bold @childCssClasses">@child.Name</span> @childMarkup
                            }
                            else
                            {
                                <Glyph Kind="@child.Kind.GetGlyph()" /> <a class="@childCssClasses" href="@Link.For(child)">@child.Name<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a> @childMarkup
                            }
                        </li>
                    }

                    @foreach (var extensionMethod in Parent.ExtensionMethods.OrderBy(em => em.ExtensionMethod))
                    {
                        var extensionBrowsingData = BrowsingContext.GetData(extensionMethod);
                        var extensionExcluded = extensionBrowsingData?.Excluded ?? false;
                        var extensionCssClasses = extensionBrowsingData?.CssClasses;
                        var extensionMarkup = extensionBrowsingData?.AdditionalMarkup;

                        if (extensionExcluded)
                            continue;

                        <li class="flex-inline-breakable">
                            @if (extensionMethod == ExtensionMethod)
                            {
                                <Glyph Kind="GlyphKind.ExtensionMethod" /> <span class="font-weight-bold @extensionCssClasses">@extensionMethod.ExtensionMethod.Name</span> @extensionMarkup
                            }
                            else
                            {
                                <Glyph Kind="GlyphKind.ExtensionMethod" /> <a class="@extensionCssClasses" href="@Link.For(extensionMethod)">@extensionMethod.ExtensionMethod.Name<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a> @extensionMarkup
                            }
                        </li>
                    }
                </ul>
            </li>
        </ul>

        <div class="col-12 col-md-9">

            <SyntaxView Current="@Api" BrowsingContext="@BrowsingContext" />

            <div class="table-responsive">
                <table class="table my-3 table-responsive-stack">

                    <!-- Usage -->

                    @foreach (var (usageSource, usages) in Usages)
                    {
                        <tr>
                            <th class="text-break align-top">
                                @usageSource.Name
                            </th>
                            <td>
                                @foreach (var usage in usages)
                                {
                                    var value = usage.Percentage * 100;
                                    var title = $"Usage on {usageSource.Name} is {usage.Percentage:P5} (as of {usageSource.Date})";

                                    <div class="usage-progress-container mb-2" title="@title">
                                        <div class="usage-progress-group">
                                            <div class="usage-progress-bar">
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" aria-label="@title" style="width: @value%;" aria-valuenow="@value" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                            </div>
                                            <div class="usage-percentage">
                                                @usage.Percentage.ToString("P1")
                                            </div>
                                        </div>
                                        <div class="usage-description text-muted small text-break">
                                            <span title="@usage.Feature.Description">@usage.Feature.Name</span>
                                        </div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }

                    <!-- Implementation -->

                    @if (!string.IsNullOrEmpty(SourceUrl))
                    {
                        <tr>
                            <th class="text-break align-top">Implementation</th>
                            <td class="text-break">
                                <a href="@SourceUrl" target="_blank">Source<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a>
                            </td>
                        </tr>
                    }

                    <!-- Help -->

                    @if (!string.IsNullOrEmpty(HelpUrl))
                    {
                        <tr>
                            <th class="text-break align-top">Help</th>
                            <td class="text-break">
                                <a href="@HelpUrl" target="_blank">Documentation<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a>
                            </td>
                        </tr>
                    }

                    <!-- Design Notes -->

                    @if (DesignReviews.Any())
                    {
                        <tr>
                            <th class="text-break align-top">Design Reviews</th>
                            <td>
                                <ul class="list-unstyled mb-0">
                                    @foreach (var designReview in DesignReviews.OrderByDescending(r => r.Date))
                                    {
                                        <li class="text-break mb-1">
                                            <a href="@designReview.Url" target="_blank">@designReview.UrlText</a> <span class="text-muted d-block d-sm-inline">@designReview.Date.Humanize() (@designReview.Context)</span>
                                        </li>
                                    }
                                </ul>
                            </td>
                        </tr>
                    }

                    <!-- Frameworks -->
                    @{
                        var inboxApiTitle = "The API is built into the target framework.";
                        var packageApiTitle = "The API requires a package to be referenced.";

                        var isAvailableInAnyRelevantFrameworks = Availability.Frameworks.Any(fx => fx.Framework.IsRelevantForCatalog());
                        var showAllFrameworks = !isAvailableInAnyRelevantFrameworks;
                    }

                    @foreach (var frameworkGroup in Availability.Frameworks.Where(a => showAllFrameworks || a.Framework.IsRelevantForCatalog())
                    .GroupBy(fx => fx.Framework.GetFrameworkDisplayString())
                    .OrderBy(g => g.Key))
                    {
                        <tr>
                            <th class="text-break align-top py-3">@frameworkGroup.Key</th>
                            <td class="py-3">
                                <div class="d-flex flex-row flex-wrap gap-2">
                                    @foreach (var group in frameworkGroup.GroupBy(a => (a.Framework.Framework, a.Framework.Version))
                                   .OrderBy(g => g.Key.Framework)
                                   .ThenBy(g => g.Key.Version))
                                    {
                                        var availability = group
                                        .OrderBy(g => g.Framework.Platform)
                                        .ThenByDescending(g => g.Framework.PlatformVersion)
                                        .ThenBy(g => g.Framework.Profile)
                                        .First();

                                        var framework = availability.Framework;
                                        var isSelectedVersion = IsSelectedFramework(framework);
                                        var isDiffLift = IsLeftFramework(framework);
                                        var isDiffRight = IsRightFramework(framework);

                                        var versionClass = availability.IsInBox
                                        ? "fx-version-inbox"
                                        : "fx-version-package";
                                        var title = availability.IsInBox
                                        ? inboxApiTitle
                                        : packageApiTitle;

                                        var selectedClass = isSelectedVersion
                                        ? "fx-selected"
                                        : "";
                                        var diffClass = isDiffLift
                                        ? "fx-left"
                                        : isDiffRight
                                        ? "fx-right"
                                        : "";

                                        <span class="fx-version @versionClass @selectedClass @diffClass" role="button" tabindex="0" title="@title" @onclick="e => VersionClick(e, availability.Framework)" @onclick:preventDefault="true" @onclick:stopPropagation="true"
                                              @onkeyup:stopPropagation="true"
                                              @onkeyup:preventDefault="true"
                                              @onkeyup="@(e => {
                                              if (e.Key == " " || e.Key == "Enter")
                                              {
                                                  VersionClick(null, availability.Framework);
                                              }
                                          })">
                                            @availability.Framework.GetBaseFrameworkOrSelf().GetVersionDisplayString()
                                        </span>
                                    }
                                </div>
                            </td>
                        </tr>
                    }

                    <tr class="section-row">
                        <th colspan="2" class="text-break">
                            Information specific to <code>@SelectedAvailability!.Framework.GetBaseFrameworkOrSelf().GetShortFolderName()</code>
                        </th>
                    </tr>

                    <!-- Platform Targets -->

                    @if (!IsCrossPlatform())
                    {
                        <tr>
                            <th class="text-break align-top py-3">Platforms</th>
                            <td class="text-break py-3">
                                This API is only available when you target a specific platform:
                            </td>
                        </tr>

                        @foreach (var platformGroup in GetSelectedPlatforms().GroupBy(a => a.Framework.Platform).OrderBy(g => g.Key))
                        {
                            <tr class="no-border-top">
                                <td class="text-break py-2">@(PlatformAnnotationEntry.FormatPlatform(platformGroup.Key))</td>
                                <td class="py-2">
                                    <div class="d-flex flex-row flex-wrap gap-2">
                                        @foreach (var availability in platformGroup.OrderBy(g => g.Framework.PlatformVersion))
                                        {
                                            var framework = availability.Framework;
                                            var isSelectedVersion = IsSelectedFramework(framework, matchAnyPlatform: false);
                                            var isDiffLift = IsLeftFramework(framework);
                                            var isDiffRight = IsRightFramework(framework);

                                            var versionClass = availability.IsInBox
                                            ? "fx-version-inbox"
                                            : "fx-version-package";
                                            var title = availability.IsInBox
                                            ? inboxApiTitle
                                            : packageApiTitle;

                                            var selectedClass = isSelectedVersion
                                            ? "fx-selected"
                                            : "";
                                            var diffClass = isDiffLift
                                            ? "fx-left"
                                            : isDiffRight
                                            ? "fx-right"
                                            : "";

                                            <span class="fx-version @versionClass @selectedClass @diffClass" role="button" tabindex="0" title="@title" @onclick="e => VersionClick(e, availability.Framework)" @onclick:preventDefault="true" @onclick:stopPropagation="true"
                                                  @onkeyup:stopPropagation="true"
                                                  @onkeyup:preventDefault="true"
                                                  @onkeyup="@(e => {
                                                  if (e.Key == " " || e.Key == "Enter")
                                                  {
                                                      VersionClick(null, availability.Framework);
                                                  }
                                              })">
                                                @availability.Framework.GetPlatformVersionDisplayString()
                                            </span>
                                        }
                                    </div>

                                </td>
                            </tr>
                        }

                        <tr class="section-row">
                            <th colspan="2" class="text-break">
                                Information specific to <code>@SelectedAvailability!.Framework.GetShortFolderName()</code>
                            </th>
                        </tr>
                    }

                    <!-- Assembly -->

                    @if (SelectedAvailability is not null)
                    {
                        var assemblies = SelectedAvailability.FrameworkDeclarations.Any()
                        ? SelectedAvailability.FrameworkDeclarations.Select(d => d.Assembly)
                        : SelectedAvailability.PackageDeclarations.Select(d => d.Declaration.Assembly);

                        var assembliesOrdered = assemblies
                        .OrderBy(a => a.Name)
                        .ThenBy(a => a.Version)
                        .ToArray();

                        var assemblyLabel = assembliesOrdered.Length == 1 ? "Assembly" : "Assemblies";

                        <tr>
                            <th class="text-break align-top">@assemblyLabel</th>
                            <td>
                                @foreach (var assembly in assemblies)
                                {
                                    <p class="mb-0 text-break">@assembly.Name <span class="small text-muted d-block d-lg-inline">, Version=@assembly.Version, PublicKeyToken=@assembly.PublicKeyToken</span></p>
                                }
                            </td>
                        </tr>
                    }

                    <!-- Referencing -->

                    <tr>
                        <th class="text-break align-top">Referencing</th>
                        <td class="reference-requirement">
                            @if (ReferenceRequirementMarkup is not null)
                            {
                                @ReferenceRequirementMarkup
                            }
                            else
                            {
                                <p>The API is automatically referenced.</p>
                            }
                        </td>
                    </tr>

                    <!-- Package -->

                    @if (SelectedAvailability is { IsInBox: false })
                    {
                        var packageDeclaration = SelectedAvailability.PackageDeclarations.First();
                        var package = packageDeclaration.Package;
                        var folder = packageDeclaration.PackageFramework.GetShortFolderName();
                        <tr>
                            <th class="text-break align-top">Package</th>
                            <td class="text-break">
                                <a href="https://nuget.org/packages/@package.Name/@package.Version">@package.Name (@package.Version)<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a> <span class="small text-muted d-block d-sm-inline">@folder</span>
                            </td>
                        </tr>
                    }

                    <!-- Obsolete -->

                    @if (SelectedAvailability?.Declaration.Obsoletion is not null)
                    {
                        var o = SelectedAvailability.Declaration.Obsoletion.Value;
                        var message = string.IsNullOrEmpty(o.Message)
                        ? "This API is obsolete."
                        : o.Message;

                        if (!string.IsNullOrEmpty(o.DiagnosticId))
                            message = $"{o.DiagnosticId}: {message}";

                        <tr>
                            <th class="text-break align-top">Obsolete</th>
                            <td class="text-break">
                                @if (o.Url is not null)
                                {
                                    <a href="@o.Url">@message<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a>
                                }
                                else
                                {
                                    <text>@message</text>
                                }
                            </td>
                        </tr>
                    }

                    <!-- Preview -->

                    @if (SelectedPreviewDescription is not null)
                    {
                        var preview = SelectedPreviewDescription.Value;
                        <tr>
                            <th class="text-break align-top">Preview</th>
                            <td class="text-break">
                                <span class="text-warning oi oi-warning mr-1"></span>
                                @preview.Description
                                @if (preview.Url is not null)
                                {
                                    <a class="pl-2" href="@preview.Url">(more details)<span class="oi oi-link-intact ml-1 small" aria-hidden="true"></span></a>
                                }
                            </td>
                        </tr>
                    }

                    <!-- Platform Restrictions -->

                    @if (Api.Kind == ApiKind.Property)
                    {
                        var getter = GetAccessor(ApiKind.PropertyGetter);
                        var setter = GetAccessor(ApiKind.PropertySetter);

                        var getterAnnotation = getter is null ? (PlatformAnnotation?)null : PlatformAnnotationContext.GetPlatformAnnotation(getter.Value);
                        var setterAnnotation = setter is null ? (PlatformAnnotation?)null : PlatformAnnotationContext.GetPlatformAnnotation(setter.Value);
                        var annotation = getterAnnotation ?? setterAnnotation;
                        if (annotation is not null)
                        {
                            <tr>
                                <th class="text-break align-top">Platform Restrictions</th>
                                <td class="text-break">
                                    @if (annotation.Value.Kind == PlatformAnnotationKind.None)
                                    {
                                        WritePlatformAnnotation("This API", annotation.Value);
                                    }
                                    else
                                    {
                                        if (getterAnnotation is not null)
                                            WritePlatformAnnotation("The property getter", getterAnnotation.Value);

                                        if (setterAnnotation is not null)
                                            WritePlatformAnnotation("The property setter", setterAnnotation.Value);
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else if (Api.Kind == ApiKind.Event)
                    {
                        var adder = GetAccessor(ApiKind.EventAdder);
                        var remover = GetAccessor(ApiKind.EventRemover);

                        var adderAnnotation = adder is null ? (PlatformAnnotation?)null : PlatformAnnotationContext.GetPlatformAnnotation(adder.Value);
                        var removerAnnotation = remover is null ? (PlatformAnnotation?)null : PlatformAnnotationContext.GetPlatformAnnotation(remover.Value);
                        var annotation = adderAnnotation ?? removerAnnotation;
                        if (annotation is not null)
                        {
                            <tr>
                                <th class="text-break align-top">Platform Restrictions</th>
                                <td class="text-break">
                                    @if (annotation.Value.Kind == PlatformAnnotationKind.None)
                                    {
                                        WritePlatformAnnotation("This API", annotation.Value);
                                    }
                                    else
                                    {
                                        if (adderAnnotation is not null)
                                            WritePlatformAnnotation("The event adder", adderAnnotation.Value);

                                        if (removerAnnotation is not null)
                                            WritePlatformAnnotation("The event remover", removerAnnotation.Value);
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else if (Api.Kind != ApiKind.Namespace)
                    {
                        var annotation = PlatformAnnotationContext.GetPlatformAnnotation(Api);
                        <tr>
                            <th class="text-break align-top">Platform Restrictions</th>
                            <td class="text-break">
                                @{
                                    WritePlatformAnnotation("This API", annotation);
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
            <ul class="list-inline small">
                <li class="list-inline-item">
                    <span class="fx-version fx-version-inbox" title="@inboxApiTitle">Built-in API</span>
                </li>
                <li class="list-inline-item">
                    <span class="fx-version fx-version-package" title="@packageApiTitle">Package-provided API</span>
                </li>
            </ul>
        </div>
    </div>
</div>

@{
    void WritePlatformAnnotation(string apiName, PlatformAnnotation annotation)
    {
        if (annotation.Kind == PlatformAnnotationKind.None)
        {
            <p class="text-muted">This framework does not have platform annotations.</p>
        }
        else if (annotation.Kind == PlatformAnnotationKind.Unrestricted)
        {
            <p>@apiName is supported on all platforms.</p>
        }
        else if (annotation.Kind == PlatformAnnotationKind.RestrictedTo)
        {
            <p>@apiName is only supported on the following platforms:</p>
            WritePlatformEntries(annotation);
        }
        else if (annotation.Kind == PlatformAnnotationKind.UnrestrictedExceptFor)
        {
            <p>@apiName is supported on any platform except for these:</p>
            WritePlatformEntries(annotation);
        }
    }

    void WritePlatformEntries(PlatformAnnotation annotation)
    {
        <ul>
            @foreach (var e in annotation.Entries)
            {
                <li>
                    @e
                </li>
            }
        </ul>
    }
}
